import logging
from datetime import datetime

import aiohttp

from bot import MY_WEATHER_API_KEY


logger = logging.getLogger(__name__)


async def get_current_weather(city: str) -> None:
    try:
        url = f'http://api.weatherapi.com/v1/current.json?key={MY_WEATHER_API_KEY}&q={city}&lang=ru'
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    logger.error(f"API –æ—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return None


async def get_forecast_weather(city: str, days: int = 7) -> None:
    try:
        url = f'http://api.weatherapi.com/v1/forecast.json?key={MY_WEATHER_API_KEY}&q={city}&days={days}&lang=ru'
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"API –æ—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return None


def format_current_weather(weather_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ"""
    if not weather_data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"

    location = weather_data['location']
    current = weather_data['current']

    return (
        f"üå§ *–ü–æ–≥–æ–¥–∞*\n\n"
        f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* `{current['temp_c']}¬∞C`\n"
        f"üí≠ *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* `{current['feelslike_c']}¬∞C`\n"
        f"üìù *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* {current['condition']['text']}\n"
        f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* `{current['humidity']}%`\n"
        f"üå¨ *–í–µ—Ç–µ—Ä:* `{current['wind_kph']} –∫–º/—á`\n"
        f"üìä *–î–∞–≤–ª–µ–Ω–∏–µ:* `{current['pressure_mb']} –º–±–∞—Ä`\n"
        f"üëÅ *–í–∏–¥–∏–º–æ—Å—Ç—å:* `{current['vis_km']} –∫–º`"
    )


def format_forecast_weather(forecast_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    if not forecast_data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"

    location = forecast_data['location']
    forecast_days = forecast_data['forecast']['forecastday']

    result = [f"*–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è:*"]

    for day in forecast_days:
        date = datetime.strptime(day['date'], '%Y-%m-%d').strftime('%d.%m')
        day_info = day['day']

        result.append(
            f"\nüìÖ *{date}:*\n"
            f"   üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* `{day_info['mintemp_c']}¬∞C...{day_info['maxtemp_c']}¬∞C`\n"
            f"   üìù *–ü–æ–≥–æ–¥–∞:* {day_info['condition']['text']}\n"
            f"   üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* `{day_info['avghumidity']}%`\n"
            f"   üå¨ *–í–µ—Ç–µ—Ä:* `{day_info['maxwind_kph']} –∫–º/—á`\n"
        )

    return "\n".join(result)
