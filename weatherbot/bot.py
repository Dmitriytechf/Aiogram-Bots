import logging
import os

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
import asyncio

from keyboards import start_kb
from utils import *


load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] - %(message)s",
)
logger = logging.getLogger(__name__)

TOKEN_KEY = os.getenv('WEATHER_API_KEY')
MY_WEATHER_API_KEY = os.getenv('SITE_WEATHER_API_KEY')

bot = Bot(TOKEN_KEY)
dp = Dispatcher()


@dp.message(CommandStart())
async def start_bot(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}! –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª help –∏ —É–∑–Ω–∞–π –ø–æ–≥–æ–¥—É!\n",
        reply_markup=start_kb
    )


@dp.message(Command("help"))
async def help_weather(message: Message):
    info = (
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üå§ /weather [–≥–æ—Ä–æ–¥] - –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞\n\n"
        "üìÖ /forecast [–≥–æ—Ä–æ–¥] - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "–ü—Ä–∏–º–µ—Ä: /forecast –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n\n"
        "üìç –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:\n"
        "`/weather London` | `/forecast New York`"
    )
    await message.answer_sticker(
        sticker='CAACAgIAAxkBAAEPq8FpBEn8j_Bhmj6zrkVgReLP87M1wAAC4BwAAnbQcUvyswPrqKIEgzYE'
    )
    await message.answer(
        info,
        parse_mode="Markdown"
    )


@dp.message(Command("weather"))
async def weather_command(message: Message):
    args = message.text.split(maxsplit=1)

    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: `/weather –ú–æ—Å–∫–≤–∞`",
                             parse_mode="Markdown")
        return

    city = args[1].strip()
    await message.answer(f"üîç –ò—â—É –ø–æ–≥–æ–¥—É –≤ *{city}*...",
                         parse_mode="Markdown")
    await asyncio.sleep(1)

    weather_data = await get_current_weather(city)
    if weather_data:
        formatted_weather = format_current_weather(weather_data)
        await message.answer(formatted_weather, parse_mode="Markdown")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è '{city}'")


@dp.message(Command("forecast"))
async def forecast_command(message: Message):
    args = message.text.split(maxsplit=1)

    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: `/forecast –ú–æ—Å–∫–≤–∞`",
                             parse_mode="Markdown")
        return

    city = args[1].strip()
    await message.answer(f"üîç –ò—â—É –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è *{city}*...",
                         parse_mode="Markdown")
    await asyncio.sleep(1)

    forecast_data = await get_forecast_weather(city)
    if forecast_data:
        formatted_forecast = format_forecast_weather(forecast_data)
        await message.answer(formatted_forecast, parse_mode="Markdown")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è '{city}'")


@dp.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª–µ—à–∞
    if text.lower() not in ['help', '–ø–æ–º–æ—â—å']:
        await message.answer(
            "ü§î *–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "üå§ `/weather [–≥–æ—Ä–æ–¥]` - –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "üìÖ `/forecast [–≥–æ—Ä–æ–¥]` - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
            "‚ùì `/help` - –ø–æ–º–æ—â—å\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "`/weather –§–µ–æ–¥–æ—Å–∏—è`\n"
            "`/forecast –§–µ–æ–¥–æ—Å–∏—è`\n"
            "`/weather London`",
            parse_mode="Markdown"
        )


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        logger.info('---–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω---')
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info('---–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è---')
    except ValueError:
        logger.critical('Exit')
